/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ProjectsProjectIdRouteRouteImport } from './routes/projects/$projectId/route'
import { Route as ProjectsProjectIdIndexRouteImport } from './routes/projects/$projectId/index'
import { Route as ProjectsProjectIdTreeRouteRouteImport } from './routes/projects/$projectId/tree/route'
import { Route as ProjectsProjectIdBlobRouteRouteImport } from './routes/projects/$projectId/blob/route'
import { Route as ProjectsProjectIdTreeIndexRouteImport } from './routes/projects/$projectId/tree/index'
import { Route as ProjectsProjectIdBlobIndexRouteImport } from './routes/projects/$projectId/blob/index'
import { Route as ProjectsProjectIdTreeSplatRouteImport } from './routes/projects/$projectId/tree/$'
import { Route as ProjectsProjectIdBlobSplatRouteImport } from './routes/projects/$projectId/blob/$'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdRouteRoute = ProjectsProjectIdRouteRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsProjectIdRouteRoute,
} as any)
const ProjectsProjectIdTreeRouteRoute =
  ProjectsProjectIdTreeRouteRouteImport.update({
    id: '/tree',
    path: '/tree',
    getParentRoute: () => ProjectsProjectIdRouteRoute,
  } as any)
const ProjectsProjectIdBlobRouteRoute =
  ProjectsProjectIdBlobRouteRouteImport.update({
    id: '/blob',
    path: '/blob',
    getParentRoute: () => ProjectsProjectIdRouteRoute,
  } as any)
const ProjectsProjectIdTreeIndexRoute =
  ProjectsProjectIdTreeIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProjectsProjectIdTreeRouteRoute,
  } as any)
const ProjectsProjectIdBlobIndexRoute =
  ProjectsProjectIdBlobIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProjectsProjectIdBlobRouteRoute,
  } as any)
const ProjectsProjectIdTreeSplatRoute =
  ProjectsProjectIdTreeSplatRouteImport.update({
    id: '/$',
    path: '/$',
    getParentRoute: () => ProjectsProjectIdTreeRouteRoute,
  } as any)
const ProjectsProjectIdBlobSplatRoute =
  ProjectsProjectIdBlobSplatRouteImport.update({
    id: '/$',
    path: '/$',
    getParentRoute: () => ProjectsProjectIdBlobRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRouteWithChildren
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/blob': typeof ProjectsProjectIdBlobRouteRouteWithChildren
  '/projects/$projectId/tree': typeof ProjectsProjectIdTreeRouteRouteWithChildren
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/blob/$': typeof ProjectsProjectIdBlobSplatRoute
  '/projects/$projectId/tree/$': typeof ProjectsProjectIdTreeSplatRoute
  '/projects/$projectId/blob/': typeof ProjectsProjectIdBlobIndexRoute
  '/projects/$projectId/tree/': typeof ProjectsProjectIdTreeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/blob/$': typeof ProjectsProjectIdBlobSplatRoute
  '/projects/$projectId/tree/$': typeof ProjectsProjectIdTreeSplatRoute
  '/projects/$projectId/blob': typeof ProjectsProjectIdBlobIndexRoute
  '/projects/$projectId/tree': typeof ProjectsProjectIdTreeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRouteWithChildren
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectId/blob': typeof ProjectsProjectIdBlobRouteRouteWithChildren
  '/projects/$projectId/tree': typeof ProjectsProjectIdTreeRouteRouteWithChildren
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/blob/$': typeof ProjectsProjectIdBlobSplatRoute
  '/projects/$projectId/tree/$': typeof ProjectsProjectIdTreeSplatRoute
  '/projects/$projectId/blob/': typeof ProjectsProjectIdBlobIndexRoute
  '/projects/$projectId/tree/': typeof ProjectsProjectIdTreeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects/$projectId'
    | '/projects'
    | '/projects/$projectId/blob'
    | '/projects/$projectId/tree'
    | '/projects/$projectId/'
    | '/projects/$projectId/blob/$'
    | '/projects/$projectId/tree/$'
    | '/projects/$projectId/blob/'
    | '/projects/$projectId/tree/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects'
    | '/projects/$projectId'
    | '/projects/$projectId/blob/$'
    | '/projects/$projectId/tree/$'
    | '/projects/$projectId/blob'
    | '/projects/$projectId/tree'
  id:
    | '__root__'
    | '/'
    | '/projects/$projectId'
    | '/projects/'
    | '/projects/$projectId/blob'
    | '/projects/$projectId/tree'
    | '/projects/$projectId/'
    | '/projects/$projectId/blob/$'
    | '/projects/$projectId/tree/$'
    | '/projects/$projectId/blob/'
    | '/projects/$projectId/tree/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsProjectIdRouteRoute: typeof ProjectsProjectIdRouteRouteWithChildren
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/'
      fullPath: '/projects/$projectId/'
      preLoaderRoute: typeof ProjectsProjectIdIndexRouteImport
      parentRoute: typeof ProjectsProjectIdRouteRoute
    }
    '/projects/$projectId/tree': {
      id: '/projects/$projectId/tree'
      path: '/tree'
      fullPath: '/projects/$projectId/tree'
      preLoaderRoute: typeof ProjectsProjectIdTreeRouteRouteImport
      parentRoute: typeof ProjectsProjectIdRouteRoute
    }
    '/projects/$projectId/blob': {
      id: '/projects/$projectId/blob'
      path: '/blob'
      fullPath: '/projects/$projectId/blob'
      preLoaderRoute: typeof ProjectsProjectIdBlobRouteRouteImport
      parentRoute: typeof ProjectsProjectIdRouteRoute
    }
    '/projects/$projectId/tree/': {
      id: '/projects/$projectId/tree/'
      path: '/'
      fullPath: '/projects/$projectId/tree/'
      preLoaderRoute: typeof ProjectsProjectIdTreeIndexRouteImport
      parentRoute: typeof ProjectsProjectIdTreeRouteRoute
    }
    '/projects/$projectId/blob/': {
      id: '/projects/$projectId/blob/'
      path: '/'
      fullPath: '/projects/$projectId/blob/'
      preLoaderRoute: typeof ProjectsProjectIdBlobIndexRouteImport
      parentRoute: typeof ProjectsProjectIdBlobRouteRoute
    }
    '/projects/$projectId/tree/$': {
      id: '/projects/$projectId/tree/$'
      path: '/$'
      fullPath: '/projects/$projectId/tree/$'
      preLoaderRoute: typeof ProjectsProjectIdTreeSplatRouteImport
      parentRoute: typeof ProjectsProjectIdTreeRouteRoute
    }
    '/projects/$projectId/blob/$': {
      id: '/projects/$projectId/blob/$'
      path: '/$'
      fullPath: '/projects/$projectId/blob/$'
      preLoaderRoute: typeof ProjectsProjectIdBlobSplatRouteImport
      parentRoute: typeof ProjectsProjectIdBlobRouteRoute
    }
  }
}

interface ProjectsProjectIdBlobRouteRouteChildren {
  ProjectsProjectIdBlobSplatRoute: typeof ProjectsProjectIdBlobSplatRoute
  ProjectsProjectIdBlobIndexRoute: typeof ProjectsProjectIdBlobIndexRoute
}

const ProjectsProjectIdBlobRouteRouteChildren: ProjectsProjectIdBlobRouteRouteChildren =
  {
    ProjectsProjectIdBlobSplatRoute: ProjectsProjectIdBlobSplatRoute,
    ProjectsProjectIdBlobIndexRoute: ProjectsProjectIdBlobIndexRoute,
  }

const ProjectsProjectIdBlobRouteRouteWithChildren =
  ProjectsProjectIdBlobRouteRoute._addFileChildren(
    ProjectsProjectIdBlobRouteRouteChildren,
  )

interface ProjectsProjectIdTreeRouteRouteChildren {
  ProjectsProjectIdTreeSplatRoute: typeof ProjectsProjectIdTreeSplatRoute
  ProjectsProjectIdTreeIndexRoute: typeof ProjectsProjectIdTreeIndexRoute
}

const ProjectsProjectIdTreeRouteRouteChildren: ProjectsProjectIdTreeRouteRouteChildren =
  {
    ProjectsProjectIdTreeSplatRoute: ProjectsProjectIdTreeSplatRoute,
    ProjectsProjectIdTreeIndexRoute: ProjectsProjectIdTreeIndexRoute,
  }

const ProjectsProjectIdTreeRouteRouteWithChildren =
  ProjectsProjectIdTreeRouteRoute._addFileChildren(
    ProjectsProjectIdTreeRouteRouteChildren,
  )

interface ProjectsProjectIdRouteRouteChildren {
  ProjectsProjectIdBlobRouteRoute: typeof ProjectsProjectIdBlobRouteRouteWithChildren
  ProjectsProjectIdTreeRouteRoute: typeof ProjectsProjectIdTreeRouteRouteWithChildren
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

const ProjectsProjectIdRouteRouteChildren: ProjectsProjectIdRouteRouteChildren =
  {
    ProjectsProjectIdBlobRouteRoute:
      ProjectsProjectIdBlobRouteRouteWithChildren,
    ProjectsProjectIdTreeRouteRoute:
      ProjectsProjectIdTreeRouteRouteWithChildren,
    ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
  }

const ProjectsProjectIdRouteRouteWithChildren =
  ProjectsProjectIdRouteRoute._addFileChildren(
    ProjectsProjectIdRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsProjectIdRouteRoute: ProjectsProjectIdRouteRouteWithChildren,
  ProjectsIndexRoute: ProjectsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
