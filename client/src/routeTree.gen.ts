/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects/$projectId/route'
import { Route as ProjectsProjectIdIndexImport } from './routes/projects/$projectId/index'
import { Route as ProjectsProjectIdTreeRouteImport } from './routes/projects/$projectId/tree/route'
import { Route as ProjectsProjectIdBlobRouteImport } from './routes/projects/$projectId/blob/route'
import { Route as ProjectsProjectIdTreeIndexImport } from './routes/projects/$projectId/tree/index'
import { Route as ProjectsProjectIdBlobIndexImport } from './routes/projects/$projectId/blob/index'
import { Route as ProjectsProjectIdTreeSplatImport } from './routes/projects/$projectId/tree/$'
import { Route as ProjectsProjectIdBlobSplatImport } from './routes/projects/$projectId/blob/$'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRouteRoute = ProjectsProjectIdRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsProjectIdRouteRoute,
} as any)

const ProjectsProjectIdTreeRouteRoute = ProjectsProjectIdTreeRouteImport.update(
  {
    id: '/tree',
    path: '/tree',
    getParentRoute: () => ProjectsProjectIdRouteRoute,
  } as any,
)

const ProjectsProjectIdBlobRouteRoute = ProjectsProjectIdBlobRouteImport.update(
  {
    id: '/blob',
    path: '/blob',
    getParentRoute: () => ProjectsProjectIdRouteRoute,
  } as any,
)

const ProjectsProjectIdTreeIndexRoute = ProjectsProjectIdTreeIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => ProjectsProjectIdTreeRouteRoute,
  } as any,
)

const ProjectsProjectIdBlobIndexRoute = ProjectsProjectIdBlobIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => ProjectsProjectIdBlobRouteRoute,
  } as any,
)

const ProjectsProjectIdTreeSplatRoute = ProjectsProjectIdTreeSplatImport.update(
  {
    id: '/$',
    path: '/$',
    getParentRoute: () => ProjectsProjectIdTreeRouteRoute,
  } as any,
)

const ProjectsProjectIdBlobSplatRoute = ProjectsProjectIdBlobSplatImport.update(
  {
    id: '/$',
    path: '/$',
    getParentRoute: () => ProjectsProjectIdBlobRouteRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/blob': {
      id: '/projects/$projectId/blob'
      path: '/blob'
      fullPath: '/projects/$projectId/blob'
      preLoaderRoute: typeof ProjectsProjectIdBlobRouteImport
      parentRoute: typeof ProjectsProjectIdRouteImport
    }
    '/projects/$projectId/tree': {
      id: '/projects/$projectId/tree'
      path: '/tree'
      fullPath: '/projects/$projectId/tree'
      preLoaderRoute: typeof ProjectsProjectIdTreeRouteImport
      parentRoute: typeof ProjectsProjectIdRouteImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/'
      fullPath: '/projects/$projectId/'
      preLoaderRoute: typeof ProjectsProjectIdIndexImport
      parentRoute: typeof ProjectsProjectIdRouteImport
    }
    '/projects/$projectId/blob/$': {
      id: '/projects/$projectId/blob/$'
      path: '/$'
      fullPath: '/projects/$projectId/blob/$'
      preLoaderRoute: typeof ProjectsProjectIdBlobSplatImport
      parentRoute: typeof ProjectsProjectIdBlobRouteImport
    }
    '/projects/$projectId/tree/$': {
      id: '/projects/$projectId/tree/$'
      path: '/$'
      fullPath: '/projects/$projectId/tree/$'
      preLoaderRoute: typeof ProjectsProjectIdTreeSplatImport
      parentRoute: typeof ProjectsProjectIdTreeRouteImport
    }
    '/projects/$projectId/blob/': {
      id: '/projects/$projectId/blob/'
      path: '/'
      fullPath: '/projects/$projectId/blob/'
      preLoaderRoute: typeof ProjectsProjectIdBlobIndexImport
      parentRoute: typeof ProjectsProjectIdBlobRouteImport
    }
    '/projects/$projectId/tree/': {
      id: '/projects/$projectId/tree/'
      path: '/'
      fullPath: '/projects/$projectId/tree/'
      preLoaderRoute: typeof ProjectsProjectIdTreeIndexImport
      parentRoute: typeof ProjectsProjectIdTreeRouteImport
    }
  }
}

// Create and export the route tree

interface ProjectsProjectIdBlobRouteRouteChildren {
  ProjectsProjectIdBlobSplatRoute: typeof ProjectsProjectIdBlobSplatRoute
  ProjectsProjectIdBlobIndexRoute: typeof ProjectsProjectIdBlobIndexRoute
}

const ProjectsProjectIdBlobRouteRouteChildren: ProjectsProjectIdBlobRouteRouteChildren =
  {
    ProjectsProjectIdBlobSplatRoute: ProjectsProjectIdBlobSplatRoute,
    ProjectsProjectIdBlobIndexRoute: ProjectsProjectIdBlobIndexRoute,
  }

const ProjectsProjectIdBlobRouteRouteWithChildren =
  ProjectsProjectIdBlobRouteRoute._addFileChildren(
    ProjectsProjectIdBlobRouteRouteChildren,
  )

interface ProjectsProjectIdTreeRouteRouteChildren {
  ProjectsProjectIdTreeSplatRoute: typeof ProjectsProjectIdTreeSplatRoute
  ProjectsProjectIdTreeIndexRoute: typeof ProjectsProjectIdTreeIndexRoute
}

const ProjectsProjectIdTreeRouteRouteChildren: ProjectsProjectIdTreeRouteRouteChildren =
  {
    ProjectsProjectIdTreeSplatRoute: ProjectsProjectIdTreeSplatRoute,
    ProjectsProjectIdTreeIndexRoute: ProjectsProjectIdTreeIndexRoute,
  }

const ProjectsProjectIdTreeRouteRouteWithChildren =
  ProjectsProjectIdTreeRouteRoute._addFileChildren(
    ProjectsProjectIdTreeRouteRouteChildren,
  )

interface ProjectsProjectIdRouteRouteChildren {
  ProjectsProjectIdBlobRouteRoute: typeof ProjectsProjectIdBlobRouteRouteWithChildren
  ProjectsProjectIdTreeRouteRoute: typeof ProjectsProjectIdTreeRouteRouteWithChildren
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

const ProjectsProjectIdRouteRouteChildren: ProjectsProjectIdRouteRouteChildren =
  {
    ProjectsProjectIdBlobRouteRoute:
      ProjectsProjectIdBlobRouteRouteWithChildren,
    ProjectsProjectIdTreeRouteRoute:
      ProjectsProjectIdTreeRouteRouteWithChildren,
    ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
  }

const ProjectsProjectIdRouteRouteWithChildren =
  ProjectsProjectIdRouteRoute._addFileChildren(
    ProjectsProjectIdRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRouteWithChildren
  '/projects/$projectId/blob': typeof ProjectsProjectIdBlobRouteRouteWithChildren
  '/projects/$projectId/tree': typeof ProjectsProjectIdTreeRouteRouteWithChildren
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/blob/$': typeof ProjectsProjectIdBlobSplatRoute
  '/projects/$projectId/tree/$': typeof ProjectsProjectIdTreeSplatRoute
  '/projects/$projectId/blob/': typeof ProjectsProjectIdBlobIndexRoute
  '/projects/$projectId/tree/': typeof ProjectsProjectIdTreeIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/blob/$': typeof ProjectsProjectIdBlobSplatRoute
  '/projects/$projectId/tree/$': typeof ProjectsProjectIdTreeSplatRoute
  '/projects/$projectId/blob': typeof ProjectsProjectIdBlobIndexRoute
  '/projects/$projectId/tree': typeof ProjectsProjectIdTreeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRouteWithChildren
  '/projects/$projectId/blob': typeof ProjectsProjectIdBlobRouteRouteWithChildren
  '/projects/$projectId/tree': typeof ProjectsProjectIdTreeRouteRouteWithChildren
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/blob/$': typeof ProjectsProjectIdBlobSplatRoute
  '/projects/$projectId/tree/$': typeof ProjectsProjectIdTreeSplatRoute
  '/projects/$projectId/blob/': typeof ProjectsProjectIdBlobIndexRoute
  '/projects/$projectId/tree/': typeof ProjectsProjectIdTreeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects/$projectId'
    | '/projects/$projectId/blob'
    | '/projects/$projectId/tree'
    | '/projects/$projectId/'
    | '/projects/$projectId/blob/$'
    | '/projects/$projectId/tree/$'
    | '/projects/$projectId/blob/'
    | '/projects/$projectId/tree/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects/$projectId'
    | '/projects/$projectId/blob/$'
    | '/projects/$projectId/tree/$'
    | '/projects/$projectId/blob'
    | '/projects/$projectId/tree'
  id:
    | '__root__'
    | '/'
    | '/projects/$projectId'
    | '/projects/$projectId/blob'
    | '/projects/$projectId/tree'
    | '/projects/$projectId/'
    | '/projects/$projectId/blob/$'
    | '/projects/$projectId/tree/$'
    | '/projects/$projectId/blob/'
    | '/projects/$projectId/tree/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsProjectIdRouteRoute: typeof ProjectsProjectIdRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsProjectIdRouteRoute: ProjectsProjectIdRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/projects/$projectId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/projects/$projectId": {
      "filePath": "projects/$projectId/route.tsx",
      "children": [
        "/projects/$projectId/blob",
        "/projects/$projectId/tree",
        "/projects/$projectId/"
      ]
    },
    "/projects/$projectId/blob": {
      "filePath": "projects/$projectId/blob/route.tsx",
      "parent": "/projects/$projectId",
      "children": [
        "/projects/$projectId/blob/$",
        "/projects/$projectId/blob/"
      ]
    },
    "/projects/$projectId/tree": {
      "filePath": "projects/$projectId/tree/route.tsx",
      "parent": "/projects/$projectId",
      "children": [
        "/projects/$projectId/tree/$",
        "/projects/$projectId/tree/"
      ]
    },
    "/projects/$projectId/": {
      "filePath": "projects/$projectId/index.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/blob/$": {
      "filePath": "projects/$projectId/blob/$.tsx",
      "parent": "/projects/$projectId/blob"
    },
    "/projects/$projectId/tree/$": {
      "filePath": "projects/$projectId/tree/$.tsx",
      "parent": "/projects/$projectId/tree"
    },
    "/projects/$projectId/blob/": {
      "filePath": "projects/$projectId/blob/index.tsx",
      "parent": "/projects/$projectId/blob"
    },
    "/projects/$projectId/tree/": {
      "filePath": "projects/$projectId/tree/index.tsx",
      "parent": "/projects/$projectId/tree"
    }
  }
}
ROUTE_MANIFEST_END */
