/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProjectsRouteRouteImport } from './routes/projects/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TopicsIndexRouteImport } from './routes/topics/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ProjectTechnologiesIndexRouteImport } from './routes/project-technologies/index'
import { Route as ProjectsCreateRouteImport } from './routes/projects/create'
import { Route as ProjectsUuidRouteRouteImport } from './routes/projects/$uuid/route'
import { Route as ProjectsUuidIndexRouteImport } from './routes/projects/$uuid/index'
import { Route as ProjectsUuidEditRouteImport } from './routes/projects/$uuid/edit'
import { Route as ProjectsUuidTreeIndexRouteImport } from './routes/projects/$uuid/tree/index'
import { Route as ProjectsUuidTreeSplatRouteImport } from './routes/projects/$uuid/tree/$'

const ProjectsRouteRoute = ProjectsRouteRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsIndexRoute = TopicsIndexRouteImport.update({
  id: '/topics/',
  path: '/topics/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsRouteRoute,
} as any)
const ProjectTechnologiesIndexRoute =
  ProjectTechnologiesIndexRouteImport.update({
    id: '/project-technologies/',
    path: '/project-technologies/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ProjectsCreateRoute = ProjectsCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ProjectsRouteRoute,
} as any)
const ProjectsUuidRouteRoute = ProjectsUuidRouteRouteImport.update({
  id: '/$uuid',
  path: '/$uuid',
  getParentRoute: () => ProjectsRouteRoute,
} as any)
const ProjectsUuidIndexRoute = ProjectsUuidIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsUuidRouteRoute,
} as any)
const ProjectsUuidEditRoute = ProjectsUuidEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ProjectsUuidRouteRoute,
} as any)
const ProjectsUuidTreeIndexRoute = ProjectsUuidTreeIndexRouteImport.update({
  id: '/tree/',
  path: '/tree/',
  getParentRoute: () => ProjectsUuidRouteRoute,
} as any)
const ProjectsUuidTreeSplatRoute = ProjectsUuidTreeSplatRouteImport.update({
  id: '/tree/$',
  path: '/tree/$',
  getParentRoute: () => ProjectsUuidRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteRouteWithChildren
  '/projects/$uuid': typeof ProjectsUuidRouteRouteWithChildren
  '/projects/create': typeof ProjectsCreateRoute
  '/project-technologies': typeof ProjectTechnologiesIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/topics': typeof TopicsIndexRoute
  '/projects/$uuid/edit': typeof ProjectsUuidEditRoute
  '/projects/$uuid/': typeof ProjectsUuidIndexRoute
  '/projects/$uuid/tree/$': typeof ProjectsUuidTreeSplatRoute
  '/projects/$uuid/tree': typeof ProjectsUuidTreeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/create': typeof ProjectsCreateRoute
  '/project-technologies': typeof ProjectTechnologiesIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/topics': typeof TopicsIndexRoute
  '/projects/$uuid/edit': typeof ProjectsUuidEditRoute
  '/projects/$uuid': typeof ProjectsUuidIndexRoute
  '/projects/$uuid/tree/$': typeof ProjectsUuidTreeSplatRoute
  '/projects/$uuid/tree': typeof ProjectsUuidTreeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteRouteWithChildren
  '/projects/$uuid': typeof ProjectsUuidRouteRouteWithChildren
  '/projects/create': typeof ProjectsCreateRoute
  '/project-technologies/': typeof ProjectTechnologiesIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/topics/': typeof TopicsIndexRoute
  '/projects/$uuid/edit': typeof ProjectsUuidEditRoute
  '/projects/$uuid/': typeof ProjectsUuidIndexRoute
  '/projects/$uuid/tree/$': typeof ProjectsUuidTreeSplatRoute
  '/projects/$uuid/tree/': typeof ProjectsUuidTreeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/projects/$uuid'
    | '/projects/create'
    | '/project-technologies'
    | '/projects/'
    | '/topics'
    | '/projects/$uuid/edit'
    | '/projects/$uuid/'
    | '/projects/$uuid/tree/$'
    | '/projects/$uuid/tree'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects/create'
    | '/project-technologies'
    | '/projects'
    | '/topics'
    | '/projects/$uuid/edit'
    | '/projects/$uuid'
    | '/projects/$uuid/tree/$'
    | '/projects/$uuid/tree'
  id:
    | '__root__'
    | '/'
    | '/projects'
    | '/projects/$uuid'
    | '/projects/create'
    | '/project-technologies/'
    | '/projects/'
    | '/topics/'
    | '/projects/$uuid/edit'
    | '/projects/$uuid/'
    | '/projects/$uuid/tree/$'
    | '/projects/$uuid/tree/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsRouteRoute: typeof ProjectsRouteRouteWithChildren
  ProjectTechnologiesIndexRoute: typeof ProjectTechnologiesIndexRoute
  TopicsIndexRoute: typeof TopicsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics/': {
      id: '/topics/'
      path: '/topics'
      fullPath: '/topics'
      preLoaderRoute: typeof TopicsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
    '/project-technologies/': {
      id: '/project-technologies/'
      path: '/project-technologies'
      fullPath: '/project-technologies'
      preLoaderRoute: typeof ProjectTechnologiesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/create': {
      id: '/projects/create'
      path: '/create'
      fullPath: '/projects/create'
      preLoaderRoute: typeof ProjectsCreateRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
    '/projects/$uuid': {
      id: '/projects/$uuid'
      path: '/$uuid'
      fullPath: '/projects/$uuid'
      preLoaderRoute: typeof ProjectsUuidRouteRouteImport
      parentRoute: typeof ProjectsRouteRoute
    }
    '/projects/$uuid/': {
      id: '/projects/$uuid/'
      path: '/'
      fullPath: '/projects/$uuid/'
      preLoaderRoute: typeof ProjectsUuidIndexRouteImport
      parentRoute: typeof ProjectsUuidRouteRoute
    }
    '/projects/$uuid/edit': {
      id: '/projects/$uuid/edit'
      path: '/edit'
      fullPath: '/projects/$uuid/edit'
      preLoaderRoute: typeof ProjectsUuidEditRouteImport
      parentRoute: typeof ProjectsUuidRouteRoute
    }
    '/projects/$uuid/tree/': {
      id: '/projects/$uuid/tree/'
      path: '/tree'
      fullPath: '/projects/$uuid/tree'
      preLoaderRoute: typeof ProjectsUuidTreeIndexRouteImport
      parentRoute: typeof ProjectsUuidRouteRoute
    }
    '/projects/$uuid/tree/$': {
      id: '/projects/$uuid/tree/$'
      path: '/tree/$'
      fullPath: '/projects/$uuid/tree/$'
      preLoaderRoute: typeof ProjectsUuidTreeSplatRouteImport
      parentRoute: typeof ProjectsUuidRouteRoute
    }
  }
}

interface ProjectsUuidRouteRouteChildren {
  ProjectsUuidEditRoute: typeof ProjectsUuidEditRoute
  ProjectsUuidIndexRoute: typeof ProjectsUuidIndexRoute
  ProjectsUuidTreeSplatRoute: typeof ProjectsUuidTreeSplatRoute
  ProjectsUuidTreeIndexRoute: typeof ProjectsUuidTreeIndexRoute
}

const ProjectsUuidRouteRouteChildren: ProjectsUuidRouteRouteChildren = {
  ProjectsUuidEditRoute: ProjectsUuidEditRoute,
  ProjectsUuidIndexRoute: ProjectsUuidIndexRoute,
  ProjectsUuidTreeSplatRoute: ProjectsUuidTreeSplatRoute,
  ProjectsUuidTreeIndexRoute: ProjectsUuidTreeIndexRoute,
}

const ProjectsUuidRouteRouteWithChildren =
  ProjectsUuidRouteRoute._addFileChildren(ProjectsUuidRouteRouteChildren)

interface ProjectsRouteRouteChildren {
  ProjectsUuidRouteRoute: typeof ProjectsUuidRouteRouteWithChildren
  ProjectsCreateRoute: typeof ProjectsCreateRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

const ProjectsRouteRouteChildren: ProjectsRouteRouteChildren = {
  ProjectsUuidRouteRoute: ProjectsUuidRouteRouteWithChildren,
  ProjectsCreateRoute: ProjectsCreateRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
}

const ProjectsRouteRouteWithChildren = ProjectsRouteRoute._addFileChildren(
  ProjectsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsRouteRoute: ProjectsRouteRouteWithChildren,
  ProjectTechnologiesIndexRoute: ProjectTechnologiesIndexRoute,
  TopicsIndexRoute: TopicsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
